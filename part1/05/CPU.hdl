// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux16(a=instruction , b=aluout , sel=instruction[15] , out=mux1 );
    Mux16(a=areg , b=inM , sel=instruction[12] , out=mux2 );
    Not(in=instruction[15], out=asel1);
    Or(a=asel1 , b=instruction[5] , out=asel );
    ARegister(in=mux1 , load=asel , out=areg, out[0..14]=addressM );
    And(a=instruction[15], b=instruction[4], out=dsel);
    DRegister(in=aluout , load=dsel , out=dreg );
    ALU(x=dreg , y=mux2 , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=aluout, out=outM , zr=zr , ng=ng );
    /*And(a=instruction[2], b=instruction[1], out=jleinst);
    Or(a=zr, b=ng, out=jlecond);
    And(a=jleinst, b=jlecond, out=jle);
    And(a=instruction[2], b=instruction[0], out=jneinst);
    Not(in=zr, out=jnecond);
    And(a=jneinst, b=jnecond, out=jne);
    And(a=instruction[1], b=instruction[0], out=jgeinst);
    
    Or(a=nng, b=zr, out=jgecond);
    And(a=jgecond, b=jgeinst, out=jge);
    And(a=jleinst, b=instruction[0], out=jmp);*/
    Not(in=ng, out=nng);
    Not(in=zr, out=nzr);
    And(a=nng , b=nzr , out=jgtpre );
    And(a=jgtpre, b=instruction[0], out=jgt);
    And(a=zr, b=instruction[1], out=jeq);
    And(a=ng, b=instruction[2], out=jle);
    Or(a=jgt, b=jeq, out=or1);
    Or(a=or1, b=jle, out=jumppre);
    And(a=jumppre, b=instruction[15], out=jump);
    Not(in=jump, out=njump);
    PC(in=areg, load=jump , inc=njump , reset=reset , out[0..14]=pc );
    And(a=instruction[3] , b=instruction[15] , out=writeM );
}